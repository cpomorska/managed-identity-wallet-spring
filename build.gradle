/********************************************************************************
 * Copyright (c) 2024 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License, Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0.
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id "de.undercouch.download" version "5.5.0"
}

group = "${appGroup}"

subprojects {
    apply {
        plugin "java"
        plugin "org.springframework.boot"
        plugin "io.spring.dependency-management"
        plugin "jacoco"
        plugin 'project-report'

    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url = uri("https://repo.danubetech.com/repository/maven-public")
        }
        maven { url 'https://jitpack.io' }
        maven {
            url = uri("https://repo.eclipse.org/content/repositories/dash-licenses/")
        }
    }

    dependencies {
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'

        testImplementation "org.testcontainers:junit-jupiter"
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine'

    }


    tasks.named('test') {
        useJUnitPlatform()

    }
    bootJar {
        enabled = false
    }


    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {

        reports {
            xml.enabled true
            xml.outputLocation = file("./build/reports/xml/jacoco.xml")

            csv.enabled false

            html.enabled true
            html.outputLocation = file("./build/reports/html/jacoco")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "org/eclipse/tractusx/managedidentitywallets/dto/*",
                        "org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
                        "org/eclipse/tractusx/managedidentitywallets/constant/*",
                        "org/eclipse/tractusx/managedidentitywallets/commons/constant/*",
                        "org/eclipse/tractusx/managedidentitywallets/exception/*"
                ])
            }))
        }
    }

    jacoco {
        toolVersion = "${jacocoVersion}"
    }


    jacocoTestCoverageVerification {
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "org/eclipse/tractusx/managedidentitywallets/dto/*",
                        "org/eclipse/tractusx/managedidentitywallets/dao/entity/*",
                        "org/eclipse/tractusx/managedidentitywallets/constant/*",
                        "org/eclipse/tractusx/managedidentitywallets/commons/constant/*",
                        "org/eclipse/tractusx/managedidentitywallets/exception/*"
                ])
            }))
        }
        violationRules {
            rule {
                limit {
                    minimum = 0.0
                }
            }
        }
    }

    htmlDependencyReport {
        projects = project.allprojects
    }

    check.dependsOn jacocoTestCoverageVerification


    tasks.register('dashDownload', Download) {
        description = 'Download the Dash License Tool standalone jar'
        group = 'License'
        src 'https://repo.eclipse.org/service/local/artifact/maven/redirect?r=dash-licenses&g=org.eclipse.dash&a=org.eclipse.dash.licenses&v=LATEST'
        dest rootProject.file('dash.jar')
        overwrite false
    }

// This task is primarily used by CIs
    tasks.register('dashClean') {
        description = "Clean all files used by the 'License' group"
        group = 'License'
        logger.lifecycle("Removing 'dash.jar'")
        rootProject.file('dash.jar').delete()
        logger.lifecycle("Removing 'deps.txt'")
        file('deps.txt').delete()
    }

    tasks.register('dashDependencies') { dashDependencies ->
        description = "Output all project dependencies as a flat list and save an intermediate file 'deps.txt'."
        group = 'License'
        dashDependencies.dependsOn('dashDownload')
        doLast {
            def deps = []
            project.configurations.each { conf ->
                // resolving 'archives' or 'default' is deprecated
                if (conf.canBeResolved && conf.getName() != 'archives' && conf.getName() != 'default') {
                    deps.addAll(
                            conf.incoming.resolutionResult.allDependencies
                                    .findAll({ it instanceof ResolvedDependencyResult })
                                    .collect { ResolvedDependencyResult dep ->
                                        "${dep.selected}"
                                    }
                    )
                }
            }

            def finalDeps = []
            for (final def d in deps) {
                //skip main module dependencies
                if (d.toString() == "project :miw"
                        || d.toString() == "project :revocation-service"
                        || d.toString() == "project :wallet-commons"
                ) {
                    println(" - " + d.toString() + " -")

                } else {
                    finalDeps.add(d)
                }
            }

            def uniqueSorted = finalDeps.unique().sort()
            uniqueSorted.each { logger.quiet("{}", it) }
            file("deps.txt").write(uniqueSorted.join('\n'))
        }
    }

    tasks.register('dashLicenseCheck', JavaExec) { dashLicenseCheck ->
        description = "Run the Dash License Tool and save the summary in the 'DEPENDENCIES' file"
        group = 'License'
        dashLicenseCheck.dependsOn('dashDownload')
        dashLicenseCheck.dependsOn('dashDependencies')
        doFirst {
            classpath = rootProject.files('dash.jar')
            // docs: https://eclipse-tractusx.github.io/docs/release/trg-7/trg-7-04
            args('-project', 'automotive.tractusx', '-summary', 'DEPENDENCIES', 'deps.txt')
        }
        doLast {
            logger.lifecycle("Removing 'deps.txt' now.")
            file('deps.txt').delete()
        }
    }

}
